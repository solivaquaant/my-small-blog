"use strict";(self.webpackChunkmy_own_blog=self.webpackChunkmy_own_blog||[]).push([[8735],{7676:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/nt334-lab2-ctf","metadata":{"permalink":"/my-small-blog/blog/nt334-lab2-ctf","source":"@site/blog/nt334-lab2-ctf/index.mdx","title":"Stego secrets: Extracting embedded files using HxD and dd","description":"Blog","date":"2025-06-01T17:32:49.000Z","tags":[{"inline":false,"label":"Steganography","permalink":"/my-small-blog/blog/tags/steganography","description":"Steganography tag description"},{"inline":false,"label":"CTF","permalink":"/my-small-blog/blog/tags/ctf","description":"CTF tag description"}],"readingTime":1.555,"hasTruncateMarker":true,"authors":[{"name":"Thai Trinh","title":"Cybersecurity Student @ UIT","url":"https://github.com/solivaquaant","page":{"permalink":"/my-small-blog/blog/authors/tndt"},"imageURL":"/my-small-blog/img/avt-trans.png","key":"tndt"}],"frontMatter":{"authors":"tndt","tags":["steganography","ctf"],"description":"Blog"},"unlisted":false},"content":"During Lab 2 of Digital Forensics course, we explored the topic of **Steganography**. \\r\\nAs part of the session, our instructor introduced a CTF-style challenge and offered bonus points to anyone who could successfully retrieve the flag.\\r\\n{/* truncate */}\\r\\n\\r\\n## Solution\\r\\nWe were provided with a video file and a hint: *\\"Look for the hex signature of a file that might be hidden inside.\\"*  \\r\\n\\r\\nTo begin, I opened the video file using **HxD**, a hex editor. \\r\\nUpon inspection, I noticed that the file header identified it as an `ftypisom` format, which is a common container signature for MP4 videos.  \\r\\n\\r\\nTo search for embedded file signatures, I used the **Search** function (`Ctrl + F`) in HxD. \\r\\nUnder **Text-string**, I looked for typical MP4 box types like:\\r\\n```\\r\\n\\"ftyp\\", \\"mdat\\", \\"moov\\", \\"pnot\\", \\"udta\\", \\"uuid\\", \\"moof\\", \\"free\\", ...\\r\\n```\\r\\nAlternatively, I could switch to **Hex-values** mode and search for hex representations of known file headers.  \\r\\n\\r\\nAfter some scanning, I found the following hex sequence:\\r\\n```\\r\\n66 74 79 70 6D 70 34 32\\r\\n```\\r\\nThis corresponds to the ASCII string `ftypmp42`, indicating the header of an **MP4 (version 2)** file. \\r\\nThis signature was located at **offset `0x1D62C78`**.\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./offset.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\nTo extract the embedded MP4 file, I first converted the offset to decimal: 0x1D62C78 = 30813300.  \\r\\n\\r\\nThen, using the `dd` command in a Unix-like environment, I extracted the hidden file:\\r\\n```bash\\r\\ndd if=video-challenge.mp4 of=output.mp4 bs=1 skip=30813300\\r\\n```\\r\\nOpening the extracted `output.mp4` revealed the flag for the challenge.\\r\\n<div style={{ width: \'80%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./flag.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\nThis exercise demonstrated how steganographic techniques can be used to conceal full files within other media, and how basic hex analysis combined with known file signatures can help uncover them.\\r\\n\\r\\n# Flag\\r\\n> `inseclab{b3h1nd_th3_sc3n3}`"}]}}')}}]);