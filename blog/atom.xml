<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://solivaquaant.github.io/my-small-blog/blog</id>
    <title>Thái Ngọc Diễm Trinh Blog</title>
    <updated>2025-06-01T17:32:49.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://solivaquaant.github.io/my-small-blog/blog"/>
    <subtitle>Thái Ngọc Diễm Trinh Blog</subtitle>
    <icon>https://solivaquaant.github.io/my-small-blog/img/jumping_avt.gif</icon>
    <entry>
        <title type="html"><![CDATA[Stego secrets: Extracting embedded files using HxD and dd]]></title>
        <id>https://solivaquaant.github.io/my-small-blog/blog/nt334-lab2-ctf</id>
        <link href="https://solivaquaant.github.io/my-small-blog/blog/nt334-lab2-ctf"/>
        <updated>2025-06-01T17:32:49.000Z</updated>
        <summary type="html"><![CDATA[Blog]]></summary>
        <content type="html"><![CDATA[<p>During Lab 2 of Digital Forensics course, we explored the topic of <strong>Steganography</strong>.
As part of the session, our instructor introduced a CTF-style challenge and offered bonus points to anyone who could successfully retrieve the flag.</p>
<!-- -->
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="solution">Solution<a href="https://solivaquaant.github.io/my-small-blog/blog/nt334-lab2-ctf#solution" class="hash-link" aria-label="Direct link to Solution" title="Direct link to Solution">​</a></h2>
<p>We were provided with a video file and a hint: <em>"Look for the hex signature of a file that might be hidden inside."</em></p>
<p>To begin, I opened the video file using <strong>HxD</strong>, a hex editor.
Upon inspection, I noticed that the file header identified it as an <code>ftypisom</code> format, which is a common container signature for MP4 videos.</p>
<p>To search for embedded file signatures, I used the <strong>Search</strong> function (<code>Ctrl + F</code>) in HxD.
Under <strong>Text-string</strong>, I looked for typical MP4 box types like:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">"ftyp", "mdat", "moov", "pnot", "udta", "uuid", "moof", "free", ...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Alternatively, I could switch to <strong>Hex-values</strong> mode and search for hex representations of known file headers.</p>
<p>After some scanning, I found the following hex sequence:</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">66 74 79 70 6D 70 34 32</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This corresponds to the ASCII string <code>ftypmp42</code>, indicating the header of an <strong>MP4 (version 2)</strong> file.
This signature was located at <strong>offset <code>0x1D62C78</code></strong>.</p>
<div style="width:100%;margin:0 auto"><img src="https://solivaquaant.github.io/my-small-blog/assets/images/offset-6cb5964b27134a84fc7d0bdf547af73c.png" style="width:100%;height:auto"></div>
<p>To extract the embedded MP4 file, I first converted the offset to decimal: 0x1D62C78 = 30813300.</p>
<p>Then, using the <code>dd</code> command in a Unix-like environment, I extracted the hidden file:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">dd if=video-challenge.mp4 of=output.mp4 bs=1 skip=30813300</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Opening the extracted <code>output.mp4</code> revealed the flag for the challenge.</p>
<div style="width:80%;margin:0 auto"><img src="https://solivaquaant.github.io/my-small-blog/assets/images/flag-15f326ca74a2aa718bc2357efc7d8831.png" style="width:100%;height:auto"></div>
<p>This exercise demonstrated how steganographic techniques can be used to conceal full files within other media, and how basic hex analysis combined with known file signatures can help uncover them.</p>
<h1>Flag</h1>
<blockquote>
<p><code>inseclab{b3h1nd_th3_sc3n3}</code></p>
</blockquote>]]></content>
        <author>
            <name>Thai Trinh</name>
            <uri>https://github.com/solivaquaant</uri>
        </author>
        <category label="Steganography" term="Steganography"/>
        <category label="CTF" term="CTF"/>
    </entry>
</feed>