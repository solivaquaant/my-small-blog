"use strict";(self.webpackChunkmy_own_blog=self.webpackChunkmy_own_blog||[]).push([[6910],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},8966:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"pico-ctf/binary-exploitation/format-string-0","title":"format string 0","description":"- Description: Can you use your knowledge of format strings to make the customers happy?","source":"@site/docs/pico-ctf/binary-exploitation/format-string-0.mdx","sourceDirName":"pico-ctf/binary-exploitation","slug":"/pico-ctf/binary-exploitation/format-string-0","permalink":"/my-small-blog/docs/pico-ctf/binary-exploitation/format-string-0","draft":false,"unlisted":false,"tags":[{"inline":false,"label":"Binary Exploitation","permalink":"/my-small-blog/docs/tags/binary-exploitation","description":"Binary exploitation tag description"}],"version":"current","frontMatter":{"tags":["binary-exploitation"]},"sidebar":"tutorialSidebar","previous":{"title":"Binary Exploitation","permalink":"/my-small-blog/docs/category/binary-exploitation"},"next":{"title":"heap 0","permalink":"/my-small-blog/docs/pico-ctf/binary-exploitation/heap-0"}}');var t=r(4848),s=r(8453);const a={tags:["binary-exploitation"]},o="format string 0",c={},l=[{value:"\ud83d\udd0e Solution",id:"-solution",level:2},{value:"Method 1: Bypassing Patrick and crashing Bob",id:"method-1-bypassing-patrick-and-crashing-bob",level:3},{value:"Method 2: Triggering a crash directly in Patrick&#39;s handler",id:"method-2-triggering-a-crash-directly-in-patricks-handler",level:3},{value:"\ud83d\udea9Flag",id:"flag",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"format-string-0",children:"format string 0"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Can you use your knowledge of format strings to make the customers happy?"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difficulty:"})," Easy"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-solution",children:"\ud83d\udd0e Solution"}),"\n",(0,t.jsxs)(n.p,{children:["This challenge focuses on exploiting a format string vulnerability through the use of the ",(0,t.jsx)(n.code,{children:"printf"})," function.\r\nThe goal is to trigger a ",(0,t.jsx)(n.em,{children:"segmentation fault"})," in the program, which leads to the flag being printed via a custom signal handler:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'void sigsegv_handler(int sig) {\r\n    printf("\\n%s\\n", flag);\r\n    fflush(stdout);\r\n    exit(1);\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"method-1-bypassing-patrick-and-crashing-bob",children:"Method 1: Bypassing Patrick and crashing Bob"}),"\n",(0,t.jsx)(n.p,{children:"Upon connecting to the server, you're first asked to recommend burgers for a customer named Patrick.\r\nThe valid options are: Breakf@st_Burger, Gr%114d_Cheese, Bac0n_D3luxe"}),"\n",(0,t.jsxs)(n.p,{children:["Looking at the function ",(0,t.jsx)(n.code,{children:"serve_patrick()"}),", the program only proceeds to the next step (serving Bob) if the following condition is met:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:"int count = printf(choice1);\r\nif (count > 2 * BUFSIZE) {\r\n    serve_bob();\r\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Here, ",(0,t.jsx)(n.code,{children:"BUFSIZE"})," is defined as 32, so ",(0,t.jsx)(n.code,{children:"count"})," must be greater than 64 to reach ",(0,t.jsx)(n.code,{children:"serve_bob()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Let's take a closer look at the input ",(0,t.jsx)(n.strong,{children:"Gr%114d_Cheese"}),".\r\nThis includes a valid format specifier ",(0,t.jsx)(n.code,{children:"%114d"}),", which tells ",(0,t.jsx)(n.code,{children:"printf"})," to print an integer with a minimum field width of 114 characters.\r\n",(0,t.jsx)(n.code,{children:"printf"})," will fetch an integer from the stack (or register depending on architecture), and output it padded to 114 characters."]}),"\n",(0,t.jsx)(n.p,{children:"The actual length of the printed string becomes:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"Gr" \u2192 2 characters'}),"\n",(0,t.jsx)(n.li,{children:"%114d \u2192 114 characters"}),"\n",(0,t.jsx)(n.li,{children:'"Cheese" \u2192 6 characters'}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"\u2192 Total: 122 characters, well over the 64-character threshold."}),"\n",(0,t.jsx)(n.p,{children:"This allows us to bypass Patrick successfully:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Enter your recommendation: Gr%114d_Cheese\r\nGr                                                                                                           4202954_Cheese\r\nGood job! Patrick is happy! Now can you serve the second customer?\n"})}),"\n",(0,t.jsx)(n.p,{children:"Now we must serve Bob, who accepts 3 burger names: Pe%to_Portobello, $outhwest_Burger, Cla%sic_Che%s%steak"}),"\n",(0,t.jsxs)(n.p,{children:["Examining the input ",(0,t.jsx)(n.strong,{children:"Cla%sic_Che%s%steak"}),", it contains 3 ",(0,t.jsx)(n.code,{children:"%s"})," specifiers.\r\nWhen ",(0,t.jsx)(n.code,{children:"printf()"})," encounters ",(0,t.jsx)(n.code,{children:"%s"}),", it attempts to read a ",(0,t.jsx)(n.code,{children:"char*"})," from the stack and then prints the string at that memory address.\r\nIf these addresses are invalid or uninitialized, the result is a segmentation fault (",(0,t.jsx)(n.code,{children:"SIGSEGV"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["And since there's a signal handler in place for ",(0,t.jsx)(n.code,{children:"SIGSEGV"}),", this crash reveals the flag:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Enter your recommendation: Cla%sic_Che%s%steak\r\nClaCla%sic_Che%s%steakic_Che(null)\r\npicoCTF{7h3_cu570m3r_15_n3v3r_SEGFAULT_c8362f05}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"method-2-triggering-a-crash-directly-in-patricks-handler",children:"Method 2: Triggering a crash directly in Patrick's handler"}),"\n",(0,t.jsx)(n.p,{children:"Alternatively, the vulnerability can be exploited earlier  during Patrick's stage by overflowing the buffer directly."}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"serve_patrick()"}),", user input is stored using:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'char choice1[BUFSIZE];\r\nscanf("%s", choice1);\n'})}),"\n",(0,t.jsx)(n.p,{children:"Since there is no bounds checking, inputting a string longer than 32 characters will overflow the buffer and potentially corrupt adjacent memory, causing a segmentation fault.\r\nThis again triggers the signal handler and prints the flag:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Enter your recommendation: abcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefghabcdefgh\r\nThere is no such burger yet!\r\n\r\npicoCTF{7h3_cu570m3r_15_n3v3r_SEGFAULT_c8362f05}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"flag",children:"\ud83d\udea9Flag"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"picoCTF{7h3_cu570m3r_15_n3v3r_SEGFAULT_c8362f05}"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);