"use strict";(self.webpackChunkmy_own_blog=self.webpackChunkmy_own_blog||[]).push([[3321],{28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var s=r(96540);const t={},o=s.createContext(t);function c(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(o.Provider,{value:n},e.children)}},92046:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"pico-ctf/general-skills/pw-crack-5","title":"PW Crack 5","description":"- Description: Can you crack the password to get the flag?","source":"@site/docs/pico-ctf/general-skills/pw-crack-5.mdx","sourceDirName":"pico-ctf/general-skills","slug":"/pico-ctf/general-skills/pw-crack-5","permalink":"/my-small-blog/docs/pico-ctf/general-skills/pw-crack-5","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"tags":[]},"sidebar":"tutorialSidebar","previous":{"title":"PW Crack 4","permalink":"/my-small-blog/docs/pico-ctf/general-skills/pw-crack-4"},"next":{"title":"Python Wrangling","permalink":"/my-small-blog/docs/pico-ctf/general-skills/python-wrangling"}}');var t=r(74848),o=r(28453);const c={tags:[]},l="PW Crack 5",a={},i=[{value:"\ud83d\udd0e Solution",id:"-solution",level:2},{value:"\ud83d\udea9Flag",id:"flag",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"pw-crack-5",children:"PW Crack 5"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Description:"})," Can you crack the password to get the flag?\r\nDownload the password checker here and you'll need the encrypted flag and the hash in the same directory too.\r\nHere's a dictionary with all possible passwords based on the password conventions we've seen so far."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Difficulty:"})," Medium"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-solution",children:"\ud83d\udd0e Solution"}),"\n",(0,t.jsxs)(n.p,{children:["The main difference between this challenge and the previous two is that the list of possible passwords is now stored in a separate file, ",(0,t.jsx)(n.code,{children:"dictionary.txt"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Our approach is to write a simple brute-force routine that reads each password from the file, hashes it, and compares the result with the stored hash.\r\nOnce a match is found, we use that password to decrypt the flag."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"with open('dictionary.txt', 'r') as f:\r\n    for line in f:\r\n        pw = line.strip()\r\n        if hash_pw(pw) == correct_pw_hash:\r\n            print(f\"[+] Found password: {pw}\")\r\n            flag = str_xor(flag_enc.decode(), pw)\r\n            print(f\"[+] Flag: {flag}\")\r\n            break\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Running the brute-force script reveals the correct password: ",(0,t.jsx)(n.strong,{children:"eee0"}),", which successfully unlocks the flag."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"> python level5.py \r\nPlease enter correct password for flag: eee0\r\nWelcome back... your flag, user:\r\npicoCTF{h45h_sl1ng1ng_fffcda23}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"flag",children:"\ud83d\udea9Flag"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"picoCTF{h45h_sl1ng1ng_fffcda23}"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);