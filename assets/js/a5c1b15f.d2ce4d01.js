"use strict";(self.webpackChunkmy_own_blog=self.webpackChunkmy_own_blog||[]).push([[8735],{7676:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/dll-side-loading-notepadpp","metadata":{"permalink":"/my-small-blog/blog/dll-side-loading-notepadpp","source":"@site/blog/dll-side-loading-notepadpp/index.mdx","title":"Exploring DLL Side Loading: A practical walkthrough using Notepad++","description":"Blog","date":"2025-08-17T05:53:50.000Z","tags":[{"inline":false,"label":"Malware","permalink":"/my-small-blog/blog/tags/malware","description":"Malware tag description"}],"readingTime":5.4,"hasTruncateMarker":true,"authors":[{"name":"Thai Trinh","title":"Cybersecurity Student @ UIT","url":"https://github.com/solivaquaant","page":{"permalink":"/my-small-blog/blog/authors/tndt"},"imageURL":"/my-small-blog/img/avt-trans.png","key":"tndt"}],"frontMatter":{"authors":"tndt","tags":["malware"],"description":"Blog"},"unlisted":false,"nextItem":{"title":"Stego secrets: Extracting embedded files using HxD and dd","permalink":"/my-small-blog/blog/nt334-lab2-ctf"}},"content":"In today\'s blog post, we\'re diving into DLL Side Loading - a technique often exploited by attackers to execute malicious code by abusing the way Windows searches for and loads dynamic link libraries.\\r\\nWe\'ll break down how DLL Side Loading works, how the Windows DLL search order contributes to the vulnerability, and walk through a practical example using Notepad++ as our target application.\\r\\n{/* truncate */}\\r\\n> \u26a0\ufe0f Disclaimer  \\r\\n> This article is for **educational** and **ethical** purposes only. \\r\\n\\r\\n## Understanding DLLs and DLL Side Loading\\r\\n**Dynamic link libraries (DLLs)** are modular components that contain code and data used by multiple programs simultaneously. \\r\\nDLLs help reduce redundancy and optimize memory usage across Windows systems.\\r\\n\\r\\n**DLL Side Loading** is a technique where an attacker places a malicious DLL in a location where a legitimate application may inadvertently load it instead of the intended one. \\r\\nThis often happens due to the **Windows DLL Search Order**, which prioritizes certain directories (like the application\'s folder) over system directories when loading libraries.\\r\\nBy exploiting this search behavior, attackers can trick applications into executing their malicious payloads without modifying the target application itself.\\r\\n\\r\\n## Tools & setup\\r\\nFor this walkthrough, we\'ll be using the following tools and setup:\\r\\n- Target: Notepad++ v8.7.7\\r\\n- ProcMon (Sysinternals): Monitor DLL loading and process activity\\r\\n- x64dbg: Reverse-engineering and binary analysis\\r\\n- Visual Studio: Compile our custom DLLs\\r\\n- Sliver C2: Open-source C2 framework\\r\\n\\r\\nEnvironment:\\r\\n- Victim: Windows 10/11\\r\\n- Attacker: Kali Linux\\r\\n- Network: NAT (VMware)\\r\\n\\r\\n## Case study: GUP.exe in Notepad++\\r\\nNotepad++ ships with an updater utility called **GUP.exe (Generic Updater)**. \\r\\nIt typically resides in `C:\\\\Program Files\\\\Notepad++\\\\updater\\\\GUP.exe`.\\r\\nThis executable checks for and installs updates for Notepad++ or its plugins. \\r\\nWhen run, it prompts a software update popup and loads several files from its directory, including:\\r\\n- `GUP.exe`\\r\\n- `libcurl.dll` -a dynamic library from the cURL project for network communication\\r\\n- `gup.xml` - configuration file for update behavior\\r\\n\\r\\nBy using **ProcMon**, we observe that `GUP.exe` loads `libcurl.dll` from the local directory, making it an *ideal* candidate for DLL Side Loading.\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./procmon.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\n## Crafting the first malicious DLL\\r\\nTo test the loading behavior, we create a simple malicious `libcurl.dll` with a MessageBox payload:\\r\\n```cpp\\r\\nBOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved) {\\r\\n    switch (ul_reason_for_call) {\\r\\n    case DLL_PROCESS_ATTACH:\\r\\n        MessageBoxA(NULL, \\"Group-CK13\\", \\"Simple DLL\\", MB_OK | MB_ICONEXCLAMATION);\\r\\n        break;\\r\\n    }\\r\\n    return TRUE;\\r\\n}\\r\\n```\\r\\nReplace the original `libcurl.dll` with our malicious version and execute `GUP.exe`. \\r\\nWe notice 2 things in **ProcMon**:\\r\\n- Our malicious DLL was successfully loaded\\r\\n- GUP.exe crashes due to missing exported functions like `curl_easy_setopt`\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./error.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\n## Identifying and exporting required functions\\r\\nThe crash occurs because `GUP.exe` expects `libcurl.dll` to expose certain functions, which our malicious DLL lacks.\\r\\nTo identify them, use `dumpbin /IMPORTS GUP.exe` in the Visual Studio command prompt to inspect the **Import Address Table (IAT)**:\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./dumpbin.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\nYou\'ll find it imports these 4 functions: `curl_easy_init`, `curl_easy_setopt`, `curl_easy_cleanup`, `curl_easy_perform`\\r\\n\\r\\nWe modify our DLL to export these functions, with `curl_easy_init` triggering our MessageBox:\\r\\n```cpp\\r\\nextern \\"C\\" __declspec(dllexport) PVOID curl_easy_init() {\\r\\n    MessageBoxA(NULL, \\"Group-CK13\\", \\"Simple DLL\\", MB_OK | MB_ICONEXCLAMATION);\\r\\n    return NULL;\\r\\n}\\r\\nextern \\"C\\" __declspec(dllexport) PVOID curl_easy_setopt() { return NULL; }\\r\\nextern \\"C\\" __declspec(dllexport) PVOID curl_easy_cleanup() { return NULL; }\\r\\nextern \\"C\\" __declspec(dllexport) PVOID curl_easy_perform() { return NULL; }\\r\\n```\\r\\n\\r\\nNow, when running `GUP.exe`, we see the MessageBox as intended.\\r\\n<div style={{ width: \'60%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./init.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\n## Combining with DLL proxying for stealth and functionality\\r\\nHowever, if we proceed as described above, when the user runs GUP.exe (or updates Notepad++), \\r\\nthey will not see the original Message Box of the application and will not be able to perform the original functionality.\\r\\n\\r\\nTherefore, we combine this with the **DLL proxying** technique - a method used to intercept function calls that are originally directed to a legitimate DLL file. \\r\\nThis is done by creating an intermediary DLL, called a Proxy DLL, which exports the same functions as the original DLL.\\r\\n\\r\\nSteps:\\r\\n1. Rename the original DLL file to `gup.dll`\\r\\n2. Add the following `#pragma` comment directives:\\r\\n- These are linker directives used to export functions just like the original DLL, but in fact, they forward the calls to the real DLL, which is now `gup.dll`\\r\\n- Syntax: `/export:function_name=originalDLL.function_name,@ordinal`\\r\\n```cpp\\r\\n#pragma comment(linker, \\"/export:curl_easy_cleanup=gup.curl_easy_cleanup,@1\\")\\r\\n#pragma comment(linker, \\"/export:curl_easy_init=gup.curl_easy_init,@6\\")\\r\\n#pragma comment(linker, \\"/export:curl_easy_perform=gup.curl_easy_perform,@12\\")\\r\\n#pragma comment(linker, \\"/export:curl_easy_setopt=gup.curl_easy_setopt,@16\\")\\r\\n```\\r\\n- Ordinal values: These are the index numbers of the exported functions, which can be viewed in tools like `x64dbg`.\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./x64.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\nWrite a `DoMagic()` function to display a MessageBox. \\r\\nThis should run in a separate thread to avoid blocking the main process:\\r\\n```cpp\\r\\nDWORD WINAPI DoMagic(LPVOID lpParameter)\\r\\n{\\r\\n    MessageBoxA(NULL, \\"Group-CK13\\", \\"Simple DLL\\", MB_OK | MB_ICONEXCLAMATION);\\r\\n    return 0;\\r\\n}\\r\\n```\\r\\nWhen the DLL is loaded (`DLL_PROCESS_ATTACH`), it creates a new thread to run `DoMagic()`:\\r\\n```cpp\\r\\ncase DLL_PROCESS_ATTACH:\\r\\n    threadHandle = CreateThread(NULL, 0, DoMagic, NULL, 0, NULL);\\r\\n    CloseHandle(threadHandle);\\r\\n    break;\\r\\n```\\r\\nAt this point, when `GUP.exe` is run again, both the original Message Box from the application and the injected (malicious) Message Box will appear.\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./proxy.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\n## Establishing remote control with Sliver C2\\r\\nTo escalate the attack, we can modify the `DoMagic()` function to establish a reverse shell or C2 session. \\r\\nIn this case, we used Sliver C2 on a Linux machine. \\r\\nOnce the user launches GUP.exe (e.g., by checking for updates), a session is established on the attacker\'s C2 interface.\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./c2.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\nFor persistence and stealth, additional techniques like process injection, registry persistence (run keys), shellcode obfuscation can be employed - though we won\'t detail them here due to ethical concerns.\\r\\n\\r\\n## Conclusion\\r\\nDLL Side Loading is a powerful and commonly abused technique in the wild. By understanding how it works, defenders can:\\r\\n- Audit how applications load DLLs\\r\\n- Harden directory permissions\\r\\n- Implement application whitelisting\\r\\n- Monitor abnormal DLL load behavior with tools like ProcMon\\r\\n\\r\\nFrom a red team or educational perspective, this hands-on walkthrough using Notepad++ shows just how easy it can be to hijack execution flow when the right conditions align.\\r\\n\\r\\n*Stay safe. Stay informed.*"},{"id":"/nt334-lab2-ctf","metadata":{"permalink":"/my-small-blog/blog/nt334-lab2-ctf","source":"@site/blog/nt334-lab2-ctf/index.mdx","title":"Stego secrets: Extracting embedded files using HxD and dd","description":"Write-up of a CTF challenge from Digital Forensics course, focusing on steganography techniques to extract hidden files.","date":"2025-08-17T05:53:50.000Z","tags":[{"inline":false,"label":"Steganography","permalink":"/my-small-blog/blog/tags/steganography","description":"Steganography tag description"},{"inline":false,"label":"CTF","permalink":"/my-small-blog/blog/tags/ctf","description":"CTF tag description"}],"readingTime":1.54,"hasTruncateMarker":true,"authors":[{"name":"Thai Trinh","title":"Cybersecurity Student @ UIT","url":"https://github.com/solivaquaant","page":{"permalink":"/my-small-blog/blog/authors/tndt"},"imageURL":"/my-small-blog/img/avt-trans.png","key":"tndt"}],"frontMatter":{"authors":"tndt","tags":["steganography","ctf"],"description":"Write-up of a CTF challenge from Digital Forensics course, focusing on steganography techniques to extract hidden files."},"unlisted":false,"prevItem":{"title":"Exploring DLL Side Loading: A practical walkthrough using Notepad++","permalink":"/my-small-blog/blog/dll-side-loading-notepadpp"}},"content":"During Lab 2 of Digital Forensics course, we explored the topic of **Steganography**. \\r\\nAs part of the session, our instructor introduced a CTF-style challenge and offered bonus points to anyone who could successfully retrieve the flag.\\r\\n{/* truncate */}\\r\\n\\r\\n## Solution\\r\\nWe were provided with a video file and a hint: *\\"Look for the hex signature of a file that might be hidden inside.\\"*  \\r\\n\\r\\nTo begin, I opened the video file using **HxD**, a hex editor. \\r\\nUpon inspection, I noticed that the file header identified it as an `ftypisom` format, which is a common container signature for MP4 videos.  \\r\\n\\r\\nTo search for embedded file signatures, I used the **Search** function (`Ctrl + F`) in HxD. \\r\\nUnder **Text-string**, I looked for typical MP4 box types like:\\r\\n```\\r\\n\\"ftyp\\", \\"mdat\\", \\"moov\\", \\"pnot\\", \\"udta\\", \\"uuid\\", \\"moof\\", \\"free\\", ...\\r\\n```\\r\\nAlternatively, I could switch to **Hex-values** mode and search for hex representations of known file headers.  \\r\\n\\r\\nAfter some scanning, I found the following hex sequence:\\r\\n```\\r\\n66 74 79 70 6D 70 34 32\\r\\n```\\r\\nThis corresponds to the ASCII string `ftypmp42`, indicating the header of an **MP4 (version 2)** file. \\r\\nThis signature was located at **offset `0x1D62C78`**.\\r\\n<div style={{ width: \'100%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./offset.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\n\\r\\nTo extract the embedded MP4 file, I first converted the offset to decimal: 0x1D62C78 = 30813300.  \\r\\n\\r\\nThen, using the `dd` command in a Unix-like environment, I extracted the hidden file:\\r\\n```bash\\r\\ndd if=video-challenge.mp4 of=output.mp4 bs=1 skip=30813300\\r\\n```\\r\\nOpening the extracted `output.mp4` revealed the flag for the challenge.\\r\\n<div style={{ width: \'80%\', margin: \'0 auto\' }}>\\r\\n  <img src={require(\\"./flag.png\\").default} style={{ width: \'100%\', height: \'auto\' }} />\\r\\n</div>\\r\\nThis exercise demonstrated how steganographic techniques can be used to conceal full files within other media, and how basic hex analysis combined with known file signatures can help uncover them.\\r\\n\\r\\n# Flag\\r\\n> `inseclab{b3h1nd_th3_sc3n3}`"}]}}')}}]);