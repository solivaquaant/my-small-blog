"use strict";(self.webpackChunkmy_own_blog=self.webpackChunkmy_own_blog||[]).push([[8445],{6307:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"pico-ctf/forensics/investigative-reversing-0","title":"Investigative Reversing 0","description":"- Description: We have recovered a binary and an image. See what you can make of it. There should be a flag somewhere.","source":"@site/docs/pico-ctf/forensics/investigative-reversing-0.mdx","sourceDirName":"pico-ctf/forensics","slug":"/pico-ctf/forensics/investigative-reversing-0","permalink":"/my-small-blog/docs/pico-ctf/forensics/investigative-reversing-0","draft":false,"unlisted":false,"tags":[{"inline":false,"label":"Forensics","permalink":"/my-small-blog/docs/tags/forensics","description":"Forensics tag description"}],"version":"current","frontMatter":{"tags":["forensics"]},"sidebar":"tutorialSidebar","previous":{"title":"information","permalink":"/my-small-blog/docs/pico-ctf/forensics/information"},"next":{"title":"like1000","permalink":"/my-small-blog/docs/pico-ctf/forensics/like1000/"}}');var i=r(4848),s=r(8453);const l={tags:["forensics"]},a="Investigative Reversing 0",o={},c=[{value:"\ud83d\udd0e Solution",id:"-solution",level:2},{value:"\ud83d\udea9Flag",id:"flag",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"investigative-reversing-0",children:"Investigative Reversing 0"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Description:"})," We have recovered a binary and an image. See what you can make of it. There should be a flag somewhere."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Difficulty:"})," Hard"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-solution",children:"\ud83d\udd0e Solution"}),"\n",(0,i.jsx)(n.p,{children:"In this challenge, we are provided with 2 files: a mystery executable and an image file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mystery: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=34b772a4f30594e2f30ac431c72667c3e10fa3e9, not stripped\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To analyze the mystery executable, I used ",(0,i.jsx)(n.a,{href:"https://github.com/NationalSecurityAgency/ghidra",children:"Ghidra"}),".\r\nUpon decompiling the ",(0,i.jsx)(n.code,{children:"main"})," function, I identified the following logic:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["It reads 26 bytes from a file named ",(0,i.jsx)(n.code,{children:"flag.txt"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["These 26 bytes are written to the end of mystery.png, but not in a straightforward way:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bytes 0-5 are written as-is"}),"\n",(0,i.jsx)(n.li,{children:"Bytes 6-14 are each incremented by 5 before being written"}),"\n",(0,i.jsx)(n.li,{children:"Byte 15 is modified by subtracting 3 before storing in local_29"}),"\n",(0,i.jsx)(n.li,{children:"Bytes 16-25 are written as-is"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'void main(void)\r\n\r\n{\r\n  FILE *__stream;\r\n  FILE *__stream_00;\r\n  size_t sVar1;\r\n  long in_FS_OFFSET;\r\n  int local_54;\r\n  int local_50;\r\n  char local_38 [4];\r\n  char local_34;\r\n  char local_33;\r\n  char local_29;\r\n  long local_10;\r\n  \r\n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\r\n  __stream = fopen("flag.txt","r");\r\n  __stream_00 = fopen("mystery.png","a");\r\n  if (__stream == (FILE *)0x0) {\r\n    puts("No flag found, please make sure this is run on the server");\r\n  }\r\n  if (__stream_00 == (FILE *)0x0) {\r\n    puts("mystery.png is missing, please run this on the server");\r\n  }\r\n  sVar1 = fread(local_38,0x1a,1,__stream);\r\n  if ((int)sVar1 < 1) {\r\n                    /* WARNING: Subroutine does not return */\r\n    exit(0);\r\n  }\r\n  puts("at insert");\r\n  fputc((int)local_38[0],__stream_00);\r\n  fputc((int)local_38[1],__stream_00);\r\n  fputc((int)local_38[2],__stream_00);\r\n  fputc((int)local_38[3],__stream_00);\r\n  fputc((int)local_34,__stream_00);\r\n  fputc((int)local_33,__stream_00);\r\n  for (local_54 = 6; local_54 < 0xf; local_54 = local_54 + 1) {\r\n    fputc((int)(char)(local_38[local_54] + \'\\x05\'),__stream_00);\r\n  }\r\n  fputc((int)(char)(local_29 + -3),__stream_00);\r\n  for (local_50 = 0x10; local_50 < 0x1a; local_50 = local_50 + 1) {\r\n    fputc((int)local_38[local_50],__stream_00);\r\n  }\r\n  fclose(__stream_00);\r\n  fclose(__stream);\r\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\r\n                    /* WARNING: Subroutine does not return */\r\n    __stack_chk_fail();\r\n  }\r\n  return;\r\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"With this logic, we can reverse the process to recover the flag from the image file:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Read the last 26 bytes from mystery.png."}),"\n",(0,i.jsxs)(n.li,{children:["Recover the original bytes:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Bytes 0-5: unchanged"}),"\n",(0,i.jsx)(n.li,{children:"Bytes 6-14: subtract 5 from each to get original values"}),"\n",(0,i.jsx)(n.li,{children:"Byte 15: add 3 to recover local_29"}),"\n",(0,i.jsx)(n.li,{children:"Bytes 16-25: unchanged"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Reconstruct the flag using the structure ",(0,i.jsx)(n.code,{children:"local_38[0..3] + local_38[6..14] + local_29 + local_38[16..25]"}),".\r\nThis effectively rebuilds almost all of the original local_38 buffer."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Finally, I wrote a simple Python script to automate this extraction and reconstruction process."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def extract_flag_from_mystery():\r\n    with open("mystery.png", "rb") as f:\r\n        data = f.read()\r\n    flag_bytes = data[-26:] \r\n\r\n    recovered = bytearray()\r\n    recovered.extend(flag_bytes[0:4])            # byte 0 \u2192 3\r\n    recovered.append(flag_bytes[4])              # byte 4\r\n    recovered.append(flag_bytes[5])              # byte 5\r\n\r\n    # byte 6 \u2192 14\r\n    for i in range(6, 15):\r\n        recovered.append((flag_bytes[i] - 5) % 256)\r\n\r\n    # byte 15\r\n    recovered.append((flag_bytes[15] + 3) % 256)\r\n\r\n    # byte 16 \u2192 25\r\n    recovered.extend(flag_bytes[16:26])\r\n    print(recovered.decode())\r\n\r\nextract_flag_from_mystery()\n'})}),"\n",(0,i.jsx)(n.p,{children:"After running the script, we successfully recovered the flag."}),"\n",(0,i.jsx)(n.h2,{id:"flag",children:"\ud83d\udea9Flag"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"picoCTF{f0und_1t_fb51c821}"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);