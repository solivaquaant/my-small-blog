"use strict";(self.webpackChunkmy_own_blog=self.webpackChunkmy_own_blog||[]).push([[6945],{14676:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"pico-ctf/cryptography/crack-the-power","title":"Crack the Power","description":"- Description: We received an encrypted message.","source":"@site/docs/pico-ctf/cryptography/crack-the-power.mdx","sourceDirName":"pico-ctf/cryptography","slug":"/pico-ctf/cryptography/crack-the-power","permalink":"/my-small-blog/docs/pico-ctf/cryptography/crack-the-power","draft":false,"unlisted":false,"tags":[{"inline":false,"label":"picoMini by CMU-Africa","permalink":"/my-small-blog/docs/tags/picomini-by-cmu-africa","description":"picoMini by CMU-Africa tag description"}],"version":"current","frontMatter":{"tags":["picomini-by-cmu-africa"]},"sidebar":"tutorialSidebar","previous":{"title":"caesar","permalink":"/my-small-blog/docs/pico-ctf/cryptography/caesar"},"next":{"title":"EVEN RSA CAN BE BROKEN???","permalink":"/my-small-blog/docs/pico-ctf/cryptography/even-rsa-can-be-broken"}}');var c=r(74848),i=r(28453);const o={tags:["picomini-by-cmu-africa"]},s="Crack the Power",a={},l=[{value:"\ud83d\udd0e Solution",id:"-solution",level:2},{value:"\ud83d\udea9Flag",id:"flag",level:2}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"crack-the-power",children:"Crack the Power"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Description:"})," We received an encrypted message.\r\nThe modulus is built from primes large enough that factoring them isn't an option, at least not today.\r\nSee if you can make sense of the numbers and reveal the flag."]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{}),"\n",(0,c.jsx)(n.h2,{id:"-solution",children:"\ud83d\udd0e Solution"}),"\n",(0,c.jsxs)(n.p,{children:["In this challenge we were given the RSA ciphertext parameters ",(0,c.jsx)(n.code,{children:"c"}),", ",(0,c.jsx)(n.code,{children:"n"}),", and ",(0,c.jsx)(n.code,{children:"e"}),".\r\nThe usual RSA encryption formula is:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"c = m^e mod n\n"})}),"\n",(0,c.jsxs)(n.p,{children:["However, if the plaintext integer ",(0,c.jsx)(n.code,{children:"m"})," satisfies ",(0,c.jsx)(n.code,{children:"m^e < n"}),", the modular reduction does nothing and ",(0,c.jsx)(n.code,{children:"c = m^e"})," exactly.\r\nIn that case, recovering ",(0,c.jsx)(n.code,{children:"m"})," reduces to taking the integer ",(0,c.jsx)(n.code,{children:"e"}),"-th root of ",(0,c.jsx)(n.code,{children:"c"})," (and checking it is exact)."]}),"\n",(0,c.jsxs)(n.p,{children:["Noting that in this challenge ",(0,c.jsx)(n.code,{children:"c < n"}),", it is very likely the ciphertext is just ",(0,c.jsx)(n.code,{children:"m^20"})," without reduction, so the plaintext ",(0,c.jsx)(n.code,{children:"m"})," is the exact 20th integer root of ",(0,c.jsx)(n.code,{children:"c"}),".\r\nI therefore wrote a small Python script to compute the integer e-th root, verify exactness, and show the recovered message."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-python",children:'def integer_nth_root(a, n):\r\n    if a < 0:\r\n        raise ValueError("a must be non-negative")\r\n    if a == 0:\r\n        return 0, True\r\n    high = 1 << ((a.bit_length() + n - 1) // n)\r\n    low = 0\r\n    while low < high:\r\n        mid = (low + high) // 2\r\n        p = mid ** n\r\n        if p == a:\r\n            return mid, True\r\n        if p < a:\r\n            low = mid + 1\r\n        else:\r\n            high = mid\r\n    root = low - 1\r\n    return root, root ** n == a\r\n\r\nn = 330718482146262445073605087722432654892918089371316297828608531435318495797325544893455484820330540417867437775901131002123739343744102713874341884624023231667148846496198369587952102180559416241967776708669723410997495828547434243842194867719567072250235295255705964526221292735666018883372906362154810817936735541696458389689326013704820438696359885497330230044342928486947676116561490590554654063154421178945154613345094994330518435742569702144527778671856689337244945526337088647641007693765885884843227159828097212297286902015948375652710873033956468980727848246630605387227470811271610876803097780512254711953298066597002504393702809784111410987942862575126126815101421197400299660864580026113174129133361392328576536574980380482557871006808674903537490518872921610515369022508222926897145373528042806577932191628335060427383918556191234733548965545626921419742627077914522113357815843901578959052161869550469431695921855284051879592657194903088928945894156142849689705788857874755428262201254605782768414053660517827626995221057678268667732020536976367343641149269156246457872207843077790974318291328681460789169986131377732155787380796093138905137579477441259086808277542781362081932020391089714599403888107667808014752548743\r\ne = 20\r\nc = 640637430810406857500566702096274084170639990940796427452789530582646559503351994084630642819529512916638846054876997125498610672759860547044513026189155901787948484482403362927101626272687833687338975274586806476773521319051152565007700259664554159504729296349469197447878298780511371211790491139075259324198933821099017956702371413354628803295864874818977161515794899731393370464401493960680296137943038196051026420339668593694062087137688243381433212756006234063987908213474461679873772065186626550125172019387777864795077647708220020565875602005103342766617735797403630407673089294641211185784285212619751433812891114930402846218495033903895776530373162661788262770661056939054381211058086594610051339027542638474293177226685727990841844712534416552304889091929218453487599517664003095313175878470753143329804811225403499575412027738206715697431439846882937410842894303689755456370733764465958658500789630510555345208100742443149436428977702242274952026208528164224667869714848093393983835310607255359839284538944300791947123779789560912249158012656403415425561337179720951703957058384748262011159099547304088342818511440896654498113757280563601\r\n\r\n\r\nif c < n:\r\n    root, exact = integer_nth_root(c, e)\r\n    if exact:\r\n        m = root\r\n        m_bytes = m.to_bytes((m.bit_length() + 7) // 8, \'big\')\r\n        print("Found m:", m)\r\n        print("Plaintext:", m_bytes.decode(\'utf-8\', errors=\'replace\'))\r\n    else:\r\n        print("c is less than n but not a perfect e-th power.")\r\nelse:\r\n    print("c >= n: ciphertext was reduced mod n; cannot get m by simple root.")\n'})}),"\n",(0,c.jsxs)(n.p,{children:["Running this script with the provided ",(0,c.jsx)(n.code,{children:"c"}),", ",(0,c.jsx)(n.code,{children:"n"}),", and ",(0,c.jsx)(n.code,{children:"e=20"})," returns the integer ",(0,c.jsx)(n.code,{children:"m"}),".\r\nConverting ",(0,c.jsx)(n.code,{children:"m"})," to bytes (big-endian) gave the hidden flag-the recovered plaintext is the challenge flag."]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:"> python script.py\r\nFound m: 2756326214127165272055984685514956805518362929135225102717\r\nPlaintext: picoCTF{t1ny_e_ee65653a}\n"})}),"\n",(0,c.jsx)(n.h2,{id:"flag",children:"\ud83d\udea9Flag"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.code,{children:"picoCTF{t1ny_e_ee65653a}"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>s});var t=r(96540);const c={},i=t.createContext(c);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);